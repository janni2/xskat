
/*
    xskat - a card game for 1 to 3 players.
    Copyright (C) 2000  Gunter Gerhardt

    This program is free software; you can redistribute it freely.
    Use it at your own risk; there is NO WARRANTY.

    Redistribution of modified versions is permitted
    provided that the following conditions are met:
    1. All copyright & permission notices are preserved.
    2.a) Only changes required for packaging or porting are made.
      or
    2.b) It is clearly stated who last changed the program.
         The program is renamed or
         the version number is of the form x.y.z,
         where x.y is the version of the original program
         and z is an arbitrary suffix.
*/

#ifndef DEFS_H
#define DEFS_H

#endif /* DEFS_H */

/* Generated stuff follows:
#############################################################################*/
void irc_log();
void irc_out();
void irc_print();
void irc_printnl();
char *irc_getline();
int irc_xinput();
int irc_match();
void irc_sendnick();
void irc_pr_ss();
void irc_pr_bs();
void irc_pr_sd();
void irc_pr_ramsch();
void irc_pr_sramsch();
void irc_pr_rskatloser();
void irc_pr_kontra();
void irc_pr_bock();
void irc_pr_resumebock();
void irc_pr_spitze();
void irc_pr_revolution();
void irc_pr_klopfen();
void irc_pr_schenken();
void irc_pr_oldrules();
void irc_pr_bockevents();
void irc_pr_alist();
void irc_pr_start();
void irc_pr_s1();
void irc_sendrules();
void irc_incidx();
void irc_sync();
void irc_sendsync();
void irc_checksync();
void irc_alarm();
void irc_talk();
char *irc_copyname();
int irc_senderok();
void irc_histsave();
void irc_sendbtev();
void irc_sendxyev();
void irc_sendsort();
void irc_sendschenken();
void irc_sendloeschen();
void irc_addcmd();
int irc_getcmd();
void irc_checkhist();
void irc_getrules();
void irc_getserverconf();
void irc_putserverconf();
void irc_putclientconf();
void irc_setpos();
void irc_getclientconf();
void irc_changenick();
void irc_checknick();
void irc_nickchanged();
void irc_msg();
void irc_parse();
void irc_connect();
void irc_init();
void init_null();
void testnull();
int kleiner_w();
int kleiner();
int hat();
int n_anwert();
int n_anspiel();
int n_abwert();
int n_abwerfen();
int minmax();
int minmaxfb();
int drunter();
int drunterdrue();
void m_nsp();
void m_nns();
void null_stich();
void null_sort();
int null_dicht();
void revolutiondist();
void start_ramsch();
void init_ramsch();
int zweibuben();
int bubeanspielen();
int sicher();
void moeglklein();
void nimm_bube();
void moegldrunter();
int ggdurchmarsch();
void m_bvr();
void m_bmr();
void m_bhr();
void m_bramsch();
int unsich_fb();
int comp_sramsch();
void ramsch_stich();
void ramsch_result();
int testgrandhand();
int left();
int right();
int iscomp();
void swap();
void setrnd();
int rndval();
int rnd();
void synerr();
int get_game();
int gutesblatt();
void mischen();
int lower();
void sort();
void calc_rw();
void do_geben();
void do_sagen();
void do_passen();
void do_akzept();
void do_msagen();
void do_mhoeren();
void do_entsch();
void do_reizen();
void drueck();
void truempfe();
int tr_voll();
int sage_kontra();
int sage_re();
int testgrand();
void calc_inhand();
int testhand();
void calc_drueck();
void nextgame();
void save_skat();
int check_bockevents();
void update_list();
void do_grandhand();
void set_prot();
void do_handspiel();
void do_druecken();
void do_handok();
void do_ansagen();
void karobube();
int karobubespielen();
void do_angesagt();
void spielphase();
int higher();
void calc_result();
void get_next();
void save_list();
void setsum();
void modsum();
void read_opt_srpk();
void read_opt();
void save_opt();
void read_list();
void fill_st();
int maxnimm();
void next_stich();
void finishgame();
void do_next();
void calc_poss();
void c_high();
void calc_high();
int zweihoechste();
int ignorieren();
int genugdrin();
int gewinnstich();
int uebernehmen();
void schmieren();
int einstechen();
int niedrighoch();
int ueberdoerfer();
int bubeausspielen();
int trumpfausspielen();
int hochausspielen();
void schenke();
int zehnblank();
int fabwerfen();
void abwerfen();
int buttern();
int hatas();
int schnippeln();
void nichtspitze();
int spitzefangen();
int restbeimir();
void m_bvsp();
void m_bmsp();
void m_bhsp();
void m_bvns();
void m_bmns();
void m_bhns();
void m_bsp();
void m_bns();
void make_best();
void adjfb();
void do_spielen();
void computer();
void play();
int main();
void init_text();
char *idxlang();
int langidx();
void info_reiz();
int trumpf_idx();
void info_spiel();
void info_stich();
void clear_info();
void set_names();
int ismemb();
void init_di();
void init_dials();
void prverz();
int ob_disabled();
void cleanip();
void cleanirchost();
void cleanname();
void hndl_btevent();
void button_press();
void draw_wedge();
void draw_actbtn();
void draw_selpos();
void new_selpos();
void new_actbtn();
void set_selpos();
void del_selpos();
void manpage();
void polldisps();
void hndl_events();
void getob_xywhbd();
void create_dial();
void findlastex();
void create_di();
void create_diopt();
void remove_dial();
void remove_di();
void draw_3d();
void draw_dial();
void draw_di();
void refresh();
void prspnam();
void di_info();
void di_hand();
void next_grandhand();
void di_grandhand();
void di_term();
void di_ende();
void di_loesch();
void di_ansage();
void di_kontra();
void di_rekontra();
void di_konre();
void di_ktrnext();
void di_dicht();
void di_weiter();
void di_wiederweiter();
void di_klopfen();
void di_schenken();
void di_geschenkt();
void di_wiederschenken();
void di_nichtschenken();
void di_schieben();
int di_verdoppelt();
void di_buben();
void di_spiel();
void list_fun();
void di_delliste();
void di_liste();
int ger_toupper();
void pformat();
void prot_fun();
void im_skat();
void di_proto();
void di_resultdi();
void di_result();
void di_delres();
void di_options();
void di_copyr();
void di_grafik();
void di_strateg();
void di_varianten();
void di_ramschopts();
void di_bockevents();
void di_geschwindigkeit();
void di_mehrspieler();
void di_lanspiel();
void di_eigenertisch();
void di_anderertisch();
void di_warteauf();
void di_irc();
void di_eingabe();
void di_wieder();
void di_input();
void change_gc();
void change_gcbg();
void change_gcxor();
int istrue();
void v_gtextnc();
void v_gtextc();
void v_gtext();
void clr_text();
void b_text();
void do_msaho();
void draw_skat();
void home_skat();
void nimm_stich();
void drop_card();
int query_err();
int closest_col();
unsigned long get_col();
void calc_desk();
void extractnam();
void extractnamln();
void usage();
void invopt();
void nomem();
void finish();
int ioerr();
void exitus();
void startirc();
int getdeffn();
void logit();
int getcode();
void decompgif();
void drawimg();
void create_card();
void xinitwin();
void xinitplayers();
int closecol();
void find_cardcol();
void card_colors();
void xinitres();
void xstoreres();
void read_cards();
void set_conames();
void xinit();
void waitt();
void stdwait();
void backgr();
void putdesk();
void drawcard();
void putcard();
void putback();
void hint_line();
void show_hint();
void putamark();
void putmark();
void remmark();
void movecard();
void homecard();
void givecard();
void initscr();
void spielendscr();
void revolutionsort();
void revolutionscr();
void clr_desk();
void draw_box();
void put_box();
void rem_box();
void inv_box();
void put_fbox();
void rem_fbox();
void inv_fbox();
int card_at();
int hndl_reizen();
int hndl_druecken();
int hndl_tauschen();
int hndl_spielen();
int hndl_nimmstich();
int hndl_button();
void setcurs();
